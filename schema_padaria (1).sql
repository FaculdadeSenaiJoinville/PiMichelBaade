-- MySQL Script generated by MySQL Workbench
-- Thu Jul  8 19:17:48 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bdsonhos
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `bdsonhos` ;

-- -----------------------------------------------------
-- Schema bdsonhos
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bdsonhos` DEFAULT CHARACTER SET utf8 ;
USE `bdsonhos` ;

-- -----------------------------------------------------
-- Table `bdsonhos`.`usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdsonhos`.`usuarios` ;

CREATE TABLE IF NOT EXISTS `bdsonhos`.`usuarios` (
  `login` VARCHAR(45) NOT NULL COMMENT 'Este campo será responsável por armazenar o login que os usuários utilziarão para acessar o sistema e salvar qual o usuário que realizou a venda.',
  `senha` CHAR(32) NOT NULL COMMENT 'Este campo armazenará a senha de cada usuário, sendo utilziado para entrar no sistema.',
  `nivel_usuario` TINYINT(1) UNSIGNED NOT NULL COMMENT 'Este campo armazenará o nível de usuário que irá distinguir os acessos de dentro do sistema. Serão 3 níveis de de usuário: 1- Administrador 2- Caixa 3- Estoquista',
  `data_nasc` DATE NOT NULL COMMENT 'Este campo armazenará a data de nascimento de cada usuário.',
  `cpf` BIGINT(11) ZEROFILL UNSIGNED NOT NULL COMMENT 'Neste campo será armazenado o cpf de cada usuário.',
  `nome` VARCHAR(255) NOT NULL COMMENT 'Neste campo será armazenado o nome completo do usuário.',
  `email` VARCHAR(100) NOT NULL COMMENT 'Neste campo será armazenado o e-mail do usuário.',
  `telefone` BIGINT(13) ZEROFILL UNSIGNED NULL COMMENT 'Neste campo será armazenado o telefone do usuário.',
  PRIMARY KEY (`login`),
  UNIQUE INDEX `cpf_UNIQUE` (`cpf` ASC) VISIBLE)
ENGINE = InnoDB;

INSERT INTO usuarios (login,senha,nivel_usuario,cpf,data_nasc,nome,email,telefone) VALUES ("teste","1817baed7670edc97916d2e36336db06",1,99484435963,"2021-12-12","teste","mibaade.mb@gmail.com",47996015808);

INSERT INTO usuarios (login,senha,nivel_usuario,cpf,data_nasc,nome,email,telefone) VALUES ("testecaixa","545805af3993a955610ebbff4eec05cc",2,99484435955,"2021-12-12","testecaixa","baade@gmail.com",47996015811);

INSERT INTO usuarios (login,senha,nivel_usuario,cpf,data_nasc,nome,email,telefone) VALUES ("testeestoquista","24de1aebdaca4ed734796f5a68bfc49b",3,99484437755,"2021-12-12","testeestoquista","teste@gmail.com",47955015811);

-- -----------------------------------------------------
-- Table `bdsonhos`.`categorias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdsonhos`.`categorias` ;

CREATE TABLE IF NOT EXISTS `bdsonhos`.`categorias` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Neste campo será armazenado o id da categoria.',
  `nome` VARCHAR(25) NOT NULL COMMENT 'Neste campo será armazenado o nome da categoria.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `idCategoria_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;

INSERT INTO categorias VALUES (1, 'teste1');
INSERT INTO categorias VALUES (2, 'teste2');
INSERT INTO categorias VALUES (3, 'teste3');
INSERT INTO categorias VALUES (4, 'teste4');

-- -----------------------------------------------------
-- Table `bdsonhos`.`produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdsonhos`.`produtos` ;

CREATE TABLE IF NOT EXISTS `bdsonhos`.`produtos` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Neste campo será armazenado o id do produto.',
  `nome` VARCHAR(100) NOT NULL COMMENT 'Neste campo será armazenado o nome do produto.',
  `valor` DECIMAL(9,2) UNSIGNED NOT NULL COMMENT 'Neste campo será armazenado qual o valor pago por produto. No caso de o produto ser por kg, será o valor do kg.',
  `isvalorunidade` TINYINT(1) UNSIGNED NOT NULL COMMENT 'Neste campo será armazenado se o produto é vendido por kg ou unidade. Para os produtos vendidos por unidade será atribuido valor 1 e por kg o valor 2.',
  `categorias_id` INT UNSIGNED NOT NULL COMMENT 'Neste campo ficará armazenado o id da categoria do produto.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `idProduto_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_produtos_categorias_idx` (`categorias_id` ASC) VISIBLE,
  CONSTRAINT `fk_produtos_categorias`
    FOREIGN KEY (`categorias_id`)
    REFERENCES `bdsonhos`.`categorias` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

INSERT INTO produtos VALUES (1, 'teste', 10, 1, 1);
INSERT INTO produtos VALUES (2, 'teste2', 20, 1, 2);
INSERT INTO produtos VALUES (3, 'teste3', 5, 2, 3);
INSERT INTO produtos VALUES (4, 'teste4', 15, 2, 4);

-- -----------------------------------------------------
-- Table `bdsonhos`.`vendas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdsonhos`.`vendas` ;

CREATE TABLE IF NOT EXISTS `bdsonhos`.`vendas` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Neste campo será armazenado o id da venda.',
  `data_venda` DATETIME NOT NULL COMMENT 'Neste campo será armazenado a data/hora na qual ocorreu a venda.',
  `usuarios_login` VARCHAR(45) NOT NULL COMMENT 'Neste campo será armazenado o login do usuário que realizou a venda.',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `idVendas_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_vendas_usuarios1_idx` (`usuarios_login` ASC) VISIBLE,
  CONSTRAINT `fk_vendas_usuarios1`
    FOREIGN KEY (`usuarios_login`)
    REFERENCES `bdsonhos`.`usuarios` (`login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bdsonhos`.`vendas_has_produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdsonhos`.`vendas_has_produtos` ;

CREATE TABLE IF NOT EXISTS `bdsonhos`.`vendas_has_produtos` (
  `vendas_id` INT UNSIGNED NOT NULL COMMENT 'Neste campo será armazenado o id da venda.',
  `produtos_id` INT UNSIGNED NOT NULL COMMENT 'Neste campo será armazenado o id do produto vendido.',
  `valor` DECIMAL(9,2) UNSIGNED NOT NULL COMMENT 'Neste campo será armazenado o valor do produto vendido.',
  `quantidade` FLOAT UNSIGNED NOT NULL COMMENT 'Neste campo será armazenado a quantidade do produto vendido.',
  PRIMARY KEY (`vendas_id`, `produtos_id`),
  INDEX `fk_vendas_has_produtos_produtos1_idx` (`produtos_id` ASC) VISIBLE,
  INDEX `fk_vendas_has_produtos_vendas1_idx` (`vendas_id` ASC) VISIBLE,
  CONSTRAINT `fk_vendas_has_produtos_vendas1`
    FOREIGN KEY (`vendas_id`)
    REFERENCES `bdsonhos`.`vendas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vendas_has_produtos_produtos1`
    FOREIGN KEY (`produtos_id`)
    REFERENCES `bdsonhos`.`produtos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

USE bdsonhos;